name: Merge change log to main after release

on:
  workflow_call:
    inputs:
      version:
        type: string
        required: true

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Copy change log section from release branch
        env:
          VERSION: ${{ inputs.version }}
        run: |
          sed -n "0,/^## Version $VERSION /d;/^## Version /q;p" CHANGELOG.md \
            > /tmp/changelog-section.md

      - uses: actions/checkout@v3
        with:
          ref: main

      - name: Merge change log to main
        env:
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_date=$(gh release view v$VERSION --json publishedAt --jq .publishedAt | sed 's/T.*//')

          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.0 ]]; then
            # this was not a patch release, so the version exists already in the CHANGELOG.md

            # update the release date
            sed -Ei "s/## Version $VERSION .*/## Version $VERSION ($release_date)/" CHANGELOG.md

            # the entries are copied over from the release branch to support workflows
            # where change log entries may be updated after preparing the release branch

            {
              # copy the portion above the release, up to and including the heading
              sed -n "0,/^## Version $VERSION /p" CHANGELOG.md
              # copy the release notes for $VERSION
              cat /tmp/changelog-section.md
              # copy the portion below the release
              sed -n "0,/^## Version $VERSION /d;0,/^## Version /{/^## Version/!d};p" CHANGELOG.md
            } > /tmp/CHANGELOG.md

            # update the real CHANGELOG.md
            cp /tmp/CHANGELOG.md CHANGELOG.md

          else
            # this was a patch release, so the version does not exist already in the CHANGELOG.md

            {
              # copy the portion above the top-most release, not including the heading
              sed -n "0,/^## Version /{ /^## Version /!p }" CHANGELOG.md
              # add the heading
              echo "## Version $VERSION ($release_date)"
              # copy the release notes for $VERSION
              cat /tmp/changelog-section.md
              # copy the portion starting from the top-most release
              sed -n "/^## Version /,\$p" CHANGELOG.md
            } > /tmp/CHANGELOG.md

            # update the real CHANGELOG.md
            cp /tmp/CHANGELOG.md CHANGELOG.md
          fi

      - name: Use CLA approved github account
        run: |
          git config user.name opentelemetrybot
          git config user.email 107717825+opentelemetrybot@users.noreply.github.com

      - name: Create pull request against main
        env:
          VERSION: ${{ inputs.version }}
          # not using secrets.GITHUB_TOKEN since pull requests from that token do not run workflows
          GH_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          if git diff --quiet; then
            if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.0 ]]; then
              echo there are no updates to merge, not creating pull request
              exit 0 # success
            else
              echo patch release notes did not get applied for some reason
              exit 1 # failure
            fi
          fi

          message="Merge change log updates from $GITHUB_REF_NAME"
          body="Merge log updates from \`$GITHUB_REF_NAME\`."
          branch="opentelemetrybot/merge-change-log-updates-from-${GITHUB_REF_NAME//\//-}"

          git checkout -b $branch
          git commit -a -m "$message"
          git push --set-upstream origin $branch
          gh pr create --title "$message" \
                       --body "$body" \
                       --base main
